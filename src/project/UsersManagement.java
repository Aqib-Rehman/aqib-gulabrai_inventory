/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.ViewportLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Aqib Rehman
 */
public class UsersManagement extends javax.swing.JFrame implements ActionListener, ListSelectionListener {

    /**
     * Creates new form UsersManagement
     */
    DefaultTableModel model1;
    FramesEntity fe;
    int idIs;

    private UserAccountRecord uar;
    int frame_id;

    public void setUser(UserAccountRecord uar) {
        this.uar = uar;
    }

    public UsersManagement() {

        initComponents();
        Toolkit kit = this.getToolkit();
        Dimension d = kit.getScreenSize();
        this.setBounds(0, 0, d.width, d.height);

        frame_id = 13;

        userList.addListSelectionListener(this);

//        JCheckBox cb1 = new JCheckBox("CheckBox1 ");
//                                    
//                                    jpanel_checkboxes.add(cb1);
//                                    jpanel_checkboxes.revalidate();
//                        jpanel_checkboxes.repaint();
//                        jlist_checkboxes.setCellRenderer(new CheckboxListCellRenderer());
//                        framesRender();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        txt_userName = new javax.swing.JTextField();
        combo_uType = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        combo_accounts = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        combo_products = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jpanel_checkboxes = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        btn_add = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        txt_password = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 255, 204)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("User Account");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(268, 12, -1, -1));

        jLabel2.setText("User Id");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 60, -1, -1));

        jLabel3.setText("Username");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 98, -1, -1));

        jLabel4.setText("Password");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 137, -1, -1));

        jLabel5.setText("User Type");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 175, -1, -1));

        txt_id.setEnabled(false);
        jPanel1.add(txt_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 57, 73, -1));
        jPanel1.add(txt_userName, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 95, 132, -1));

        combo_uType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ADMIN", "OTHER" }));
        jPanel1.add(combo_uType, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 172, 107, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 102)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setText("Accounts");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 15, -1, -1));

        jPanel2.add(combo_accounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 12, 230, 30));

        jButton1.setBackground(new java.awt.Color(51, 51, 205));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 80, -1));

        jButton3.setBackground(new java.awt.Color(51, 51, 205));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("DEL ALL");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 90, -1));

        jButton2.setBackground(new java.awt.Color(51, 51, 205));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Select");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 81, 80, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 225, 330, 110));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 102)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Products");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 15, -1, -1));

        jPanel3.add(combo_products, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 12, 230, 30));

        jButton5.setBackground(new java.awt.Color(51, 51, 205));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("ADD");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 80, -1));

        jButton7.setBackground(new java.awt.Color(51, 51, 205));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("DEL ALL");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 90, -1));

        jButton6.setBackground(new java.awt.Color(51, 51, 205));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("SELECT");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 81, 80, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 330, 110));

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jpanel_checkboxes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jpanel_checkboxes.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jCheckBox1.setText("CUSTOMER");
        jpanel_checkboxes.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jCheckBox2.setText("CASH TRANSACTION");
        jpanel_checkboxes.add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jCheckBox3.setText("PRODUCT");
        jpanel_checkboxes.add(jCheckBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jCheckBox4.setText("PURCHASE BOOK");
        jpanel_checkboxes.add(jCheckBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jCheckBox5.setText("SALE BOOK");
        jpanel_checkboxes.add(jCheckBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jCheckBox6.setText("VOUCHER");
        jpanel_checkboxes.add(jCheckBox6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        jCheckBox7.setText("CASH BOOK");
        jpanel_checkboxes.add(jCheckBox7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, -1, -1));

        jCheckBox8.setText("CR/DT BOOK");
        jpanel_checkboxes.add(jCheckBox8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        jCheckBox9.setText("A/C PAY/REC");
        jpanel_checkboxes.add(jCheckBox9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        jCheckBox10.setText("CASH REGISTER");
        jpanel_checkboxes.add(jCheckBox10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));

        jCheckBox11.setText("AC CLOSING");
        jpanel_checkboxes.add(jCheckBox11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        jCheckBox12.setText("PRINTING REPORTS");
        jpanel_checkboxes.add(jCheckBox12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));

        jPanel4.add(jpanel_checkboxes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 23, 194, 390));

        btn_add.setBackground(new java.awt.Color(102, 102, 102));
        btn_add.setForeground(new java.awt.Color(255, 255, 255));
        btn_add.setText("ADD");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });
        jPanel4.add(btn_add, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 78, -1));

        jButton10.setBackground(new java.awt.Color(102, 102, 102));
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("DELETE");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(126, 420, 78, -1));

        jButton11.setBackground(new java.awt.Color(102, 102, 102));
        jButton11.setForeground(new java.awt.Color(255, 255, 255));
        jButton11.setText("CLEAR");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(342, 420, 78, -1));

        btn_update.setBackground(new java.awt.Color(102, 102, 102));
        btn_update.setForeground(new java.awt.Color(255, 255, 255));
        btn_update.setText("UPDATE");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });
        jPanel4.add(btn_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(242, 420, -1, -1));

        jButton13.setBackground(new java.awt.Color(102, 102, 102));
        jButton13.setForeground(new java.awt.Color(255, 255, 255));
        jButton13.setText("BACK");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(342, 450, 78, -1));

        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(userList);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(261, 51, 149, 363));

        jLabel10.setText("Users");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(317, 26, -1, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 28, -1, -1));
        jPanel1.add(txt_password, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 140, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, 576));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        // TODO add your handling code here:
        String idIs2 = txt_id.getText().toString().trim();
        int idIs = Integer.parseInt(idIs2);
        String userName = txt_userName.getText().toString();
        String password = txt_password.getText();
        String userType = combo_uType.getSelectedItem().toString();
        String framesSelect = "";
//        DefaultListModel model = new DefaultListModel();
//      model = (DefaultListModel) jlist_checkboxes.getModel();
//      List frames = fe.getAllFrames();

//       for (int i = 0; i < frames.size(); i++) {
        //ch[i]=new JCheckBox("CheckBox"+i);
//                model.addElement(new CheckListItem("CheckBox"+i));
//                model.addElement(new CheckListItem(frames.get(i)));
//           model.getElementAt(i);
//            FrameRecord item = (FrameRecord)
//                       model.getElementAt(i);
        if (jCheckBox1.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox1.getText();
        }
        if (jCheckBox2.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox2.getText();
        }
        if (jCheckBox3.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox3.getText();
        }
        if (jCheckBox4.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox4.getText();
        }
        if (jCheckBox5.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox5.getText();
        }
        if (jCheckBox6.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox6.getText();
        }
        if (jCheckBox7.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox7.getText();
        }
        if (jCheckBox8.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox8.getText();
        }
        if (jCheckBox9.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox9.getText();
        }
        if (jCheckBox10.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox10.getText();
        }
        if (jCheckBox11.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox11.getText();
        }
        if (jCheckBox12.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox12.getText();
        }

//           if(item.isSelected()){
//               String frameName = item.toString();
//               framesSelect = framesSelect+","+frameName;
//           
//            System.out.println("****"+frameName);
//           }
//            }
        System.out.println("****" + password);
        if (userName.trim().length() >= 5 && password.trim().length() >= 6) {
            if (framesSelect.equals("")) {
                JOptionPane.showMessageDialog(this, "Error: Select atleast one frame");

            } else {
                try {

//             java.util.Vector v=
                    int res = DatabaseManager.addUserFramePermission(idIs, userName, password, userType, framesSelect, uar.id, frame_id);

                    if (res == 0) {
                        JOptionPane.showMessageDialog(this, "Error: User already exist with this username");

                    } else if (res == 1) {
                        JOptionPane.showMessageDialog(this, "Success: User added with given permissions");
                        show();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } else {

            JOptionPane.showMessageDialog(this, "username should be atleast 5 characters and password must be of atleat 6 characters length");
        }

    }//GEN-LAST:event_btn_addActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:

        clearRecord();


    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:

        hide();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:

        if (txt_id.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Error: Enter a user id");
        } else {
            int id = Integer.parseInt(txt_id.getText());
            int res = DatabaseManager.deleteUser(id, uar.id, frame_id);
            if (res == -1) {
                JOptionPane.showMessageDialog(this, "Error: User not exist with given user id");
            } else if (res == 1) {
                JOptionPane.showMessageDialog(this, "Success: User deleted");
                show();
            } else {
                JOptionPane.showMessageDialog(this, "Error: An error occured");

            }
        }


    }//GEN-LAST:event_jButton10ActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:

        int idIs = Integer.parseInt(txt_id.getText().toString());
//      String userName =   txt_userName.getText().toString();
//      String password =   txt_password.toString();
        String password = txt_password.getText();

        String framesSelect = "";
//        DefaultListModel model = new DefaultListModel();
//      model = (DefaultListModel) jlist_checkboxes.getModel();
//      List frames = fe.getAllFrames();

//       for (int i = 0; i < frames.size(); i++) {
        //ch[i]=new JCheckBox("CheckBox"+i);
//                model.addElement(new CheckListItem("CheckBox"+i));
//                model.addElement(new CheckListItem(frames.get(i)));
//           model.getElementAt(i);
//            FrameRecord item = (FrameRecord)
//                       model.getElementAt(i);
//           if(item.isSelected()){
//               String frameName = item.toString();
//               framesSelect = framesSelect+","+frameName;
//           
//            System.out.println("****"+frameName);
//           }
//            }
        if (jCheckBox1.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox1.getText();
        }
        if (jCheckBox2.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox2.getText();
        }
        if (jCheckBox3.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox3.getText();
        }
        if (jCheckBox4.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox4.getText();
        }
        if (jCheckBox5.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox5.getText();
        }
        if (jCheckBox6.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox6.getText();
        }
        if (jCheckBox7.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox7.getText();
        }
        if (jCheckBox8.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox8.getText();
        }
        if (jCheckBox9.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox9.getText();
        }
        if (jCheckBox10.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox10.getText();
        }
        if (jCheckBox11.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox11.getText();
        }
        if (jCheckBox12.isSelected()) {
            framesSelect = framesSelect + "," + jCheckBox12.getText();
        }

//       System.out.println("****"+userName);
        System.out.println("****" + password);
        if (password.trim().length() >= 6) {
            if (framesSelect.equals("")) {
                JOptionPane.showMessageDialog(this, "Error: Select atleast one frame");

            } else {
                try {

//             java.util.Vector v=
                    int res = DatabaseManager.updateUserFramePermission(idIs, password, framesSelect, uar.id, frame_id);

                    if (res == -1) {
                        JOptionPane.showMessageDialog(this, "Error: User not exist, Add the user First");

                    } else if (res == 0) {
                        JOptionPane.showMessageDialog(this, "Error Occured");

                    } else if (res == 1) {
                        JOptionPane.showMessageDialog(this, "Success: User updated with given permissions");
                        show();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } else {

            JOptionPane.showMessageDialog(this, "Password must be of atleat 6 characters length");
        }


    }//GEN-LAST:event_btn_updateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (combo_accounts.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Select an account to add");
        } else {
            if (txt_userName.getText().trim().length() < 5) {
                JOptionPane.showMessageDialog(this, "Select a user");
            } else {

                try {
                    String customerIds = "";

                    for (int i = 0; i < combo_accounts.getItemCount(); i++) {
                        CustomerRecord cr = (CustomerRecord) combo_accounts.getItemAt(i);
                        customerIds += cr.customer_id + ",";
                    }

                    String idIs2 = txt_id.getText().toString().trim();
                    int idIs = Integer.parseInt(idIs2);

                    int res = DatabaseManager.addUserCustomerPermission(idIs, customerIds, uar.id, frame_id);

                    if (res == 0) {
                        JOptionPane.showMessageDialog(this, "Error: User not exist, Firstly add user");

                    } else if (res == 1) {
                        JOptionPane.showMessageDialog(this, "Success: Account permissions added");
                        show();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:

         if (combo_products.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Select products to add");
        } else {
            if (txt_userName.getText().trim().length() < 5) {
                JOptionPane.showMessageDialog(this, "Select a user");
            } else {

                try {
                    String productIds = "";

                    for (int i = 0; i < combo_products.getItemCount(); i++) {
                        ProductRecord pr = (ProductRecord) combo_products.getItemAt(i);
                        productIds += pr.product_id + ",";
                    }

                    String idIs2 = txt_id.getText().toString().trim();
                    int idIs = Integer.parseInt(idIs2);

                    int res = DatabaseManager.addUserProductPermission(idIs, productIds, uar.id, frame_id);

                    if (res == 0) {
                        JOptionPane.showMessageDialog(this, "Error: User not exist, Firstly add user");

                    } else if (res == 1) {
                        JOptionPane.showMessageDialog(this, "Success: Product permissions added");
                        show();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            }

        }

         

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        ItemSelector itemSelector = new ItemSelector(this, combo_accounts, 1, uar);
        itemSelector.setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        ItemSelector itemSelector = new ItemSelector(this, combo_products, 2, uar);
        itemSelector.setVisible(true);

//          new ItemSelector().setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
                if (combo_accounts.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Select an account to delete");
        } else {
            if (txt_userName.getText().trim().length() < 5) {
                JOptionPane.showMessageDialog(this, "Select a user");
            } else {

                try {
                     

                    String idIs2 = txt_id.getText().toString().trim();
                    int idIs = Integer.parseInt(idIs2);

                    int res = DatabaseManager.deleteUserCustomerPermission(idIs, uar.id, frame_id);

                    if (res == 0) {
                        JOptionPane.showMessageDialog(this, "Error: User not exist, Firstly add user");

                    } else if (res == 1) {
                        JOptionPane.showMessageDialog(this, "Success: Account permissions deleted");
                        show();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            }

        }
                
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        
           if (combo_products.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Select a product to delete");
        } else {
            if (txt_userName.getText().trim().length() < 5) {
                JOptionPane.showMessageDialog(this, "Select a user");
            } else {

                try {
                     

                    String idIs2 = txt_id.getText().toString().trim();
                    int idIs = Integer.parseInt(idIs2);

                    int res = DatabaseManager.deleteUserProductPermission(idIs, uar.id, frame_id);

                    if (res == 0) {
                        JOptionPane.showMessageDialog(this, "Error: User not exist, Firstly add user");

                    } else if (res == 1) {
                        JOptionPane.showMessageDialog(this, "Success: Product permissions deleted");
                        show();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

            }

        }
           
           
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
////        try {
////            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
////                if ("Nimbus".equals(info.getName())) {
////                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
////                    break;
////                }
////            }
////        } catch (ClassNotFoundException ex) {
////            throw ex;
////         } catch (InstantiationException ex) {
////        throw ex;
////         } catch (IllegalAccessException ex) {
////        throw ex;
////         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
////        throw ex;
////         }
//        //</editor-fold>
//  
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//               UsersManagement um = new UsersManagement();
//               um.framesRender();
////               um.revalidate();
//               um.setVisible(true);
//            }
//        });
//    }
    public void framesRender() {
        /*     
        
        
         //         String[]labels={"a","b","c","d","e"};
         //            JCheckBox[]ch=new JCheckBox[labels.length];
         
         List frames = fe.getAllFrames();

         final DefaultListModel model = new DefaultListModel();
         jlist_checkboxes.setModel(model);
         //            JList list=new JList(model);
         jlist_checkboxes.setCellRenderer(new CheckboxListCellRenderer());
         for (int i = 0; i < frames.size(); i++) {
         //ch[i]=new JCheckBox("CheckBox"+i);
         //                model.addElement(new CheckListItem("CheckBox"+i));
         FrameRecord fr1 = new FrameRecord(frames.get(i).toString());
         fr1.setSelected(true);
         model.addElement(fr1);
         System.out.println("test1.1");
         Rectangle r = jlist_checkboxes.getCellBounds(i, i);
         jlist_checkboxes.repaint(r);
                
         //                model.addElement(new FrameRecord(frames.get(i).toString()));
         }
            
            
         jlist_checkboxes.addMouseListener(new MouseAdapter()
         {
         public void mouseClicked(MouseEvent event)
         {
         JList list = (JList) event.getSource();
         // Get index of item clicked
         int index = list.locationToIndex(event.getPoint());
         FrameRecord item = (FrameRecord)
         list.getModel().getElementAt(index);
         // Toggle selected state
         item.setSelected(! item.isSelected());
         // Repaint cell
         list.repaint(list.getCellBounds(index, index));
         }
         }); 
            
            
            
         //        DefaultListModel listModel = new DefaultListModel();
         //for (int i = 0; i < 7; i++)
         //{
         //    JCheckBox[] checkBoxList = new JCheckBox[numberCheckBox];
         //    listModel.addElement("aa");
         //}
         //jlist_checkboxes.setModel(listModel);
        
   
         //DefaultListModel listModel1 = new DefaultListModel();
         // int numberCheckBox = 5;
         // JCheckBox[] checkBoxList = new JCheckBox[numberCheckBox];
         //for(int i = 0; i < numberCheckBox; i++) {
         ////    checkBoxList[i] = new JCheckBox("CheckBox" + i);
         //     JCheckBox checkBox2 = new JCheckBox("Checkbox 2", true);
         //     
         //listModel1.addElement(checkBox2);
         //}
         //jlist_checkboxes.setModel(listModel1);
        
         //        int numberCheckBox = 5;
         //JCheckBox[] checkBoxList = new JCheckBox[numberCheckBox];
         //
         //for(int i = 0; i < numberCheckBox; i++) {
         //    checkBoxList[i] = new JCheckBox("CheckBox" + i);
         //    jpanel_checkboxes.add(checkBoxList[i]);
         //    jpanel_checkboxes.repaint();
         //}

        
         // set flow layout for the frame
         //        this.getContentPane().setLayout(new FlowLayout(FlowLayout.TRAILING, 50, 20)); //(default) centered alignment and a default 5-unit horizontal and vertical gap.

         //        JCheckBox checkBox1 = new JCheckBox("Checkbox 1");
         //        checkBox1.setSelected(true);
         //
         //        JCheckBox checkBox2 = new JCheckBox("Checkbox 2", true);
         //
         //        JCheckBox checkBox3 = new JCheckBox("Checkbox 3");
         //
         //        // add checkboxes to frame
         //
         //        jpanel_checkboxes.add(checkBox1);
         //
         //        jpanel_checkboxes.add(checkBox2);
         //        jpanel_checkboxes.add(checkBox3);
         //
         //        pack();
        
        
         //          model1 = new DefaultTableModel(){
         //            public Class <?>getColumnClass(int column){
         //                switch (column){
         //                    case 0:
         //                    return String.class;
         //                    default:
         //                    return String.class;
         //                }
         //            }
         //        };
         //        //    tbl_items.setModel(new DefaultTableModel(rows, columnNames));
         //        tbl_items.setModel(model1);
         //    
         //        Vector rows  = new Vector();
         //        Vector columnNames = new Vector();
         //        columnNames.addElement("Flight Id");
         //        columnNames.addElement("Flight Type");
         //        columnNames.addElement("From");
         //        columnNames.addElement("To");
         //        columnNames.addElement("Departure Time");
         //        columnNames.addElement("Arrival Time");
         //        columnNames.addElement("Seats Available");
         //        columnNames.addElement("Cost");
         //        columnNames.addElement("Total Time");
         //        columnNames.addElement("Select");
         //        
         //        model1.addColumn("Flight Id");
         //        model1.addColumn("Flight Type");
         //        model1.addColumn("From");
         //        model1.addColumn("To");
         //        model1.addColumn("Departure Time");
         //        model1.addColumn("Arrival Time");
         //        model1.addColumn("Seats Available");
         //        model1.addColumn("Cost");
         //        model1.addColumn("Total Time");
         //        model1.addColumn("Select"); 
         //        
         //        for(int i=0; i<fel1.size();i++){
         //
         //            Vector <Object> newRow = new Vector <Object>();
         ////            newRow.addElement(ci.getValue());
         //            newRow.addElement(fel1.get(i).getId().toString());
         //            newRow.addElement(fel1.get(i).getFlightType());
         //            newRow.addElement(fel1.get(i).getFrom());
         //            newRow.addElement(fel1.get(i).getTo());
         //            newRow.addElement(fel1.get(i).getDepartureTime());
         //            newRow.addElement(fel1.get(i).getArrivalTime());
         //            newRow.addElement(fel1.get(i).getSeats());
         //            newRow.addElement(fel1.get(i).getCost());
         //            newRow.addElement(fel1.get(i).getHrs());
         //            //        String idIs = resturantEntity.getMenuItemList().get(i).getId().toString();
         //            //        Checkbox c1 = new Checkbox();
         //            //        c1.setName(idIs);
         //            newRow.addElement(Boolean.FALSE);
         ////            newRow.addElement("0");
         //            
         //            rows.addElement(newRow);
         //            model1.addRow(newRow);
         //        }
        
         */
    }

    private void getUser() {
        try {
            java.util.Vector v = DatabaseManager.getUsers();
            userList.setListData(v);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Database Driver check ODBC [" + e.getMessage() + "]");
            e.printStackTrace();
        }
    }//end method

    public void show() {
        clearRecord();
        getUser();
        super.show();

        fe = new FramesEntity();

        try {
//             java.util.Vector v=
            DatabaseManager.createUserAccountTable();
            System.out.println("test2");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {
//             java.util.Vector v=
            idIs = DatabaseManager.getLastUserId();

            txt_id.setText(idIs + 1 + "");
            System.out.println("test2");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        framesRender();

    }

    public void valueChanged(ListSelectionEvent e) {

        System.out.println(e.getSource().toString());

        UserAccountRecord rec = (UserAccountRecord) userList.getSelectedValue();
        if (rec == null) {
            return;
        }

        clearRecord();
        txt_userName.setText(rec.username);
//    txt_password.setText(rec.password );
        txt_id.setText(rec.id + "");

        combo_uType.setSelectedItem(Decode.userTypeDecode(rec.type));

        if (rec.frames.contains(jCheckBox1.getText())) {
            jCheckBox1.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox2.getText())) {
            jCheckBox2.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox3.getText())) {
            jCheckBox3.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox4.getText())) {
            jCheckBox4.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox5.getText())) {
            jCheckBox5.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox6.getText())) {
            jCheckBox6.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox7.getText())) {
            jCheckBox7.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox8.getText())) {
            jCheckBox8.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox9.getText())) {
            jCheckBox9.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox10.getText())) {
            jCheckBox10.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox11.getText())) {
            jCheckBox11.setSelected(true);
        }
        if (rec.frames.contains(jCheckBox12.getText())) {
            jCheckBox12.setSelected(true);
        }
        
//        combo_accounts.

        for (int i = 0; i < rec.customers.size(); i++) {
            CustomerRecord cr = (CustomerRecord) rec.customers.get(i);
            combo_accounts.addItem(cr);
        }
//     
        for (int i = 0; i < rec.products.size(); i++) {
            combo_products.addItem(rec.products.get(i));
        }

//    measurementUnitComboBox.setSelectedItem(Decode.measurementUnitDecode(rec.measurement_unit));
//    companyTextField.setText(rec.company );
//    valueTextField.setText(rec.product_value );
//    descriptionTextArea.setText(rec.remarks);
    }//end mthod

    public static void setProducts(Object[] selectedItems) {

//         combo_products.removeAllItems();
//         for(int i=0; i<selectedItems.length;i++){
//               combo_products.addItem(selectedItems[i].toString());
//         }
    }

    private void clearRecord() {
        txt_userName.setText("");
        txt_password.setText("");
        txt_id.setText(idIs + 1 + "");
        combo_uType.setSelectedItem("ADMIN");
        combo_accounts.removeAllItems();
        combo_products.removeAllItems();
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox5.setSelected(false);
        jCheckBox6.setSelected(false);
        jCheckBox7.setSelected(false);
        jCheckBox8.setSelected(false);
        jCheckBox9.setSelected(false);
        jCheckBox10.setSelected(false);
        jCheckBox11.setSelected(false);
        jCheckBox12.setSelected(false);

    }//end method


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox combo_accounts;
    private javax.swing.JComboBox combo_products;
    private javax.swing.JComboBox combo_uType;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpanel_checkboxes;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_password;
    private javax.swing.JTextField txt_userName;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent ae) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
